dir:
  base: "/opt/mr3-run"
  work: "/opt/mr3-run/hive"
  conf: "/opt/mr3-run/conf"
  keytab: "/opt/mr3-run/key"
  persistentVolumeClaim: "/opt/mr3-run/work-dir"

name:
  hive:
    hiveserver2: hivemr3-hiveserver2
    service: hiveserver2
    serviceAccount: hive-service-account
    configMap: hivemr3-conf-configmap
    secret: hivemr3-keytab-secret
  metastore:
    service: metastore
  envSecret: env-secret
  amConfigMap: client-am-config
  persistentVolume: workdir-pv
  persistentVolumeClaim: workdir-pvc

docker:
  image: 10.1.91.17:5000/hive5:latest
  # if not set, docker.image will be used instead
  containerWorkerImage:
  # do not use a composite name like hive@RED, hive/red0@RED
  user: hive
  imagePullPolicy: Always
  imagePullSecrets: 

create:
  # specifies whether or not to create metastore service inside k8s
  metastore: false

metastore:
  # if create.metastore == true, this field will be ignored and 
  # replaced with hivemr3-metastore-0.metastore.{{namespace}}.svc.cluster.local
  host: red0
  port: 9850

  databaseHost: indigo0
  databaseName: hive5mr3
  # argument to schemaTool (not for hive.metastore.db.type in hive-site.xml)
  dbType: mysql

  warehouseDir: hdfs://red0:8020/user/hive/warehouse

  initSchema: false
  mountLib: false
  hostLib: false
  hostLibDir: "/home/ec2-user/lib"

  secureMode: true
  kerberosPrincipal: hive/red0@RED
  # keytab file under dir.keytab
  kerberosKeytab: "hive.service.keytab"
  
  resources:
    requests:
      cpu: 2
      memory: 16Gi
    limits:
      cpu: 2
      memory: 16Gi
  heapSize: 16384

hive:
  port: 9852
  externalIp: 10.1.91.41
  replicas: 1
  # amMode options: kubernetes, localthread, and localprocess
  amMode: kubernetes

  # specifies whether or not to create a Secret from dir.keytab/*
  createSecret: true
  # authentication options: NONE (uses plain SASL), NOSASL, KERBEROS, LDAP, PAM, and CUSTOM
  authentication: KERBEROS
  kerberosPrincipal: hive/red0@RED
  # keytab file under dir.keytab
  kerberosKeytab: "hive.service.keytab"
  # specifies whether Hive token renewal is enabled inside DAGAppMaster and ContainerWorkers 
  tokenRenewalEnabled: false

  # Truststore for HiveServer2
  # file name under dir.keytab
  sslTruststore: hivemr3-ssl-certificate.jks
  sslTruststoreType: jks
  sslTruststorePass: 

  resources:
    requests:
      cpu: 2
      memory: 16Gi
    limits:
      cpu: 2
      memory: 16Gi
  heapSize: 16384

# for reading from secure HDFS
hdfs:
  userPrincipal: hive@RED
  # file name under dir.keytab
  userKeytab: "hive.service.keytab"
  tokenRenewalEnabled: true

# if not set, random values will be generated
amConfig:
  key:
  timestamp:
  mr3SessionId:
  atsSecretKey:

workDir:
  # if false, the user should manually create PersistentVolumeClaim of the same name specified by the 
  # field name.persistentVolume, and PersistentVolume if necessary
  create: true

  isNfs: true
  nfs:
    server: "10.1.91.17"
    path: "/work/nfs/mr3-run-work-dir"
  volumeSize: 10Gi
  volumeClaimSize: 10Gi
  storageClassName: ""
  # if isNfs == false, configure a volume like below.
  # volumeStr should be indented properly with a double space (or multiple double spaces) after '\n'.
  #   ex. okay  -> volumeStr: "hostPath:\n  path: /work/nfs/mr3-run-work-dir"
  #   ex. wrong -> volumeStr: "hostPath:\n path: /work/nfs/mr3-run-work-dir"
  volumeStr: 

logLevel: INFO

hostAliases:
- ip: "10.1.90.9"
  hostnames:
  - "gold0"
- ip: "10.1.91.4"
  hostnames:
  - "red0"
- ip: "10.1.91.41"
  hostnames:
  - "indigo20"

